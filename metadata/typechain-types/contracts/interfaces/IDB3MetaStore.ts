/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IDB3MetaStore {
  export type NetworkRegistrationStruct = {
    rollupNodeUrl: PromiseOrValue<string>;
    indexNodeUrls: PromiseOrValue<string>[];
    networkId: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<string>;
    latestArweaveTx: PromiseOrValue<BytesLike>;
  };

  export type NetworkRegistrationStructOutput = [
    string,
    string[],
    BigNumber,
    string,
    string
  ] & {
    rollupNodeUrl: string;
    indexNodeUrls: string[];
    networkId: BigNumber;
    sender: string;
    latestArweaveTx: string;
  };
}

export interface IDB3MetaStoreInterface extends utils.Interface {
  functions: {
    "getAllNetworkRegistrations(uint64,uint64)": FunctionFragment;
    "getNetworkRegistration(uint64)": FunctionFragment;
    "registerIndexNode(uint64,string)": FunctionFragment;
    "registerNetwork(uint64,string,string[],bytes)": FunctionFragment;
    "registerRollupNode(uint64,string)": FunctionFragment;
    "updateRollupSteps(uint64,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAllNetworkRegistrations"
      | "getNetworkRegistration"
      | "registerIndexNode"
      | "registerNetwork"
      | "registerRollupNode"
      | "updateRollupSteps"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllNetworkRegistrations",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkRegistration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerIndexNode",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNetwork",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRollupNode",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRollupSteps",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllNetworkRegistrations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerIndexNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNetwork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRollupNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRollupSteps",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IDB3MetaStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDB3MetaStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllNetworkRegistrations(
      page: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IDB3MetaStore.NetworkRegistrationStructOutput[]]>;

    getNetworkRegistration(
      networkId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string[], BigNumber, string, string] & {
        rollupNodeUrl: string;
        indexNodeUrls: string[];
        registrationNetworkId: BigNumber;
        sender: string;
        latestArweaveTx: string;
      }
    >;

    registerIndexNode(
      networkId: PromiseOrValue<BigNumberish>,
      indexNodeUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerNetwork(
      networkId: PromiseOrValue<BigNumberish>,
      rollupNodeUrl: PromiseOrValue<string>,
      indexNodeUrls: PromiseOrValue<string>[],
      latestArweaveTx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerRollupNode(
      networkId: PromiseOrValue<BigNumberish>,
      rollupNodeUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRollupSteps(
      networkId: PromiseOrValue<BigNumberish>,
      latestArweaveTx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getAllNetworkRegistrations(
    page: PromiseOrValue<BigNumberish>,
    pageSize: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IDB3MetaStore.NetworkRegistrationStructOutput[]>;

  getNetworkRegistration(
    networkId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string[], BigNumber, string, string] & {
      rollupNodeUrl: string;
      indexNodeUrls: string[];
      registrationNetworkId: BigNumber;
      sender: string;
      latestArweaveTx: string;
    }
  >;

  registerIndexNode(
    networkId: PromiseOrValue<BigNumberish>,
    indexNodeUrl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerNetwork(
    networkId: PromiseOrValue<BigNumberish>,
    rollupNodeUrl: PromiseOrValue<string>,
    indexNodeUrls: PromiseOrValue<string>[],
    latestArweaveTx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerRollupNode(
    networkId: PromiseOrValue<BigNumberish>,
    rollupNodeUrl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRollupSteps(
    networkId: PromiseOrValue<BigNumberish>,
    latestArweaveTx: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllNetworkRegistrations(
      page: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IDB3MetaStore.NetworkRegistrationStructOutput[]>;

    getNetworkRegistration(
      networkId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string[], BigNumber, string, string] & {
        rollupNodeUrl: string;
        indexNodeUrls: string[];
        registrationNetworkId: BigNumber;
        sender: string;
        latestArweaveTx: string;
      }
    >;

    registerIndexNode(
      networkId: PromiseOrValue<BigNumberish>,
      indexNodeUrl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerNetwork(
      networkId: PromiseOrValue<BigNumberish>,
      rollupNodeUrl: PromiseOrValue<string>,
      indexNodeUrls: PromiseOrValue<string>[],
      latestArweaveTx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerRollupNode(
      networkId: PromiseOrValue<BigNumberish>,
      rollupNodeUrl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateRollupSteps(
      networkId: PromiseOrValue<BigNumberish>,
      latestArweaveTx: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getAllNetworkRegistrations(
      page: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetworkRegistration(
      networkId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerIndexNode(
      networkId: PromiseOrValue<BigNumberish>,
      indexNodeUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerNetwork(
      networkId: PromiseOrValue<BigNumberish>,
      rollupNodeUrl: PromiseOrValue<string>,
      indexNodeUrls: PromiseOrValue<string>[],
      latestArweaveTx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerRollupNode(
      networkId: PromiseOrValue<BigNumberish>,
      rollupNodeUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRollupSteps(
      networkId: PromiseOrValue<BigNumberish>,
      latestArweaveTx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllNetworkRegistrations(
      page: PromiseOrValue<BigNumberish>,
      pageSize: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetworkRegistration(
      networkId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerIndexNode(
      networkId: PromiseOrValue<BigNumberish>,
      indexNodeUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerNetwork(
      networkId: PromiseOrValue<BigNumberish>,
      rollupNodeUrl: PromiseOrValue<string>,
      indexNodeUrls: PromiseOrValue<string>[],
      latestArweaveTx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerRollupNode(
      networkId: PromiseOrValue<BigNumberish>,
      rollupNodeUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRollupSteps(
      networkId: PromiseOrValue<BigNumberish>,
      latestArweaveTx: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
